#!/bin/sh

set -eu

readonly SCRIPT_NAME='alpine-make-oci'
readonly BUILDAH='buildah'
readonly ALPINE_MAKE_ROOTFS='alpine-make-rootfs'

usage() {
    cat <<EOF
Creates OCI compliant Alpine Linux container image. 

Usage:
    $SCRIPT_NAME [options] [ -- [config_flags] ]

    $SCRIPT_NAME unshare [options] [ -- [config_flags] ]   
                                    Run the script rootless.

Options:
    -h, --help                      Show this message then exit.
    -k, --keep                      Keep image in the local repository.
    -n, --name=<name>               Generated image name.
    -o, --output=<path>             Save a compressed OCI bundle at the specified location.

Config Flags: 
    buildah-config arguments; see buildah-config(1).

EOF
    return 0
}

cleanup() {
    set +eu
    trap '' EXIT HUP INT TERM

    if [ "$container_id" != '' ]; then
        $BUILDAH rm $container_id &>/dev/null
    fi

    if [ $keep == 'no' ] && [ "$image_id" != '' ]; then
        $BUILDAH rmi $image_id &>/dev/null
    fi
}

die() {
    echo "$0: error: $1"
    exit 1
}

bad_args() {
    die "Invalid argument '$1'. Try, '$SCRIPT_NAME --help'."
}

#== main ==#

# Check for required commands.
for cmd in "$BUILDAH" "$ALPINE_MAKE_ROOTFS"; do
    if ! command -V "$cmd" >/dev/null 2>&1; then
        die "$cmd command missing."
    fi
done

# Check if we should re-run this script using cgroup isolation.
if [ $# -gt 0 ] && [ "$1" = "unshare" ]; then
    shift
    $BUILDAH unshare -- "$0" "$*"
    exit
fi

# Pull out the buildah args.
buildah_args=$(echo "$*" | awk -F"-- " '{ print $2 }')
eval set -- $(echo "$*" | awk -F"-- " '{ print $1 }')

# Parse the arguments.
if ! OPTS=$(getopt -n $SCRIPT_NAME -o hko:n: -l help,keep,output:,name: -- "$@"); then
    exit 1
fi
eval set -- "$OPTS"
while :; do
    case "$1" in
    -h | --help)
        usage
        exit 0
        ;;
    -k | --keep)
        keep='yes'
        shift
        ;;
    -o | --output)
        out_path="$2"
        write_file='yes'
        shift 2
        ;;
    -n | --name)
        image_name=$2
        shift 2
        ;;
    --)
        shift
        break
        ;;
    *) bad_args $1 ;;
    esac
done

# There should be nothing left.
if [ $# -gt 0 ]; then
    bad_args $1
fi

# Set the defaults.
: ${keep:='no'}
: ${write_file:='no'}
: ${image_name:=''}
container_id=''
image_id=''

# Catch all exit signals.
trap cleanup EXIT HUP INT TERM

# Initialize an empty container instance.
container_id=$($BUILDAH from scratch |
    xargs $BUILDAH inspect |
    grep 'ContainerID' |
    sed -e 's/^ *"ContainerID": \"//' -e 's/\", *$//')

# Create a mount point so that we can write into the container.
mount_point=$($BUILDAH mount $container_id)

# Create the root file system.
$ALPINE_MAKE_ROOTFS --branch v3.8 -- $mount_point

# Unmount the container.
$BUILDAH umount $container_id &>/dev/null

# Configure the container if specified.
if [ "$buildah_args" != '' ]; then
    echo "config $buildah_args $container_id" | xargs -t $BUILDAH
fi

# Save the container as an image into the local repository.
image_id=$($BUILDAH commit $container_id $image_name)

# Write the OCI bundle.
if [ $write_file = 'yes' ]; then
    $BUILDAH push $image_id oci-archive:"$out_path"
fi
